name: Build Packer AMI
run-name: ${{ github.actor }} is running packer build

on:
  push:
    branches:
      - main

jobs:
  build_ami:
    # name: Integration Test and Packer AMI Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: Display node-version
      run: node --version

    - name: Install dependencies
      run: npm install
      
    - name: Wait for PostgreSQL to be ready
      run: |
        until nc -z localhost 5432; do
          sleep 1
        done

    - name: Run health check and Start server in background
      run: npm start &
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_DIALECT: ${{ secrets.DB_DIALECT }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PORT: ${{ secrets.PORT }}
        ENV_TYPE: ${{ secrets.ENV_TYPE }}

    - name: Wait for server to be ready
      run: |
        until nc -z localhost 8080; do
          sleep 1
        done

    - name: Running healthz integration test
      run: npm test
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_DIALECT: ${{ secrets.DB_DIALECT }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PORT: ${{ secrets.PORT }}
        ENV_TYPE: ${{ secrets.ENV_TYPE }}

    - name: Set up Packer
      uses: hashicorp/setup-packer@main
      with:
        packer_version: latest

    - name: Delete the node modules in the webapp
      run: |
        if [ -d ./node_modules ]; then
          echo "node_modules exists. Deleting it..."
          rm -rf ./node_modules
        else
          echo "node_modules does not exist."
        fi

    - name: Packer Init
      run: |
        packer init .

    - name: Zip the webapp
      run: zip -r ${{ github.workspace }}/webapp.zip . --exclude .git/\*

    - name: Check if webapp.zip exists
      run: |
        if [ ! -f ./webapp.zip ]; then
          echo "webapp.zip does not exist!"
          exit 1
        else
          echo "webapp.zip exists."
        fi

    - name: Build AMI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_DIALECT: ${{ secrets.DB_DIALECT }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PORT: ${{ secrets.DB_PORT }}
        ENV_TYPE: ${{ secrets.ENV_TYPE }}
        PORT: ${{ secrets.PORT }}
        PACKER_LOG: 1
      run: |
        echo "Setting environment variables..."
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export DB_USERNAME=${{ secrets.DB_USERNAME }}
        export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        export DB_DIALECT=${{ secrets.DB_DIALECT }}
        export DB_HOST=${{ secrets.DB_HOST }}
        export DB_NAME=${{ secrets.DB_NAME }}
        export DB_PORT=${{ secrets.DB_PORT }}
        export ENV_TYPE=${{ secrets.ENV_TYPE }}
        export PORT=${{ secrets.PORT }}
        echo "Starting Packer build with debug mode..."
        packer build -debug \
        -var "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
        -var "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
        -var "DB_HOST=${{ secrets.DB_HOST }}" \
        -var "DB_DIALECT=${{ secrets.DB_DIALECT }}" \
        -var "DB_PORT=${{ secrets.DB_PORT }}" \
        -var "DB_NAME=${{ secrets.DB_NAME }}" \
        -var "PORT=${{ secrets.PORT }}" \
        -var "ENV_TYPE=${{ secrets.ENV_TYPE }}" \
        ami.pkr.hcl
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        aws-region: us-east-1

    - name: Instance Refresh automation / Continuous Delivery
      run: |
          sudo apt-get install jq
          ASG_NAME=${{ secrets.ASG_NAME }}  
          LAUNCH_CONFIG=${{ secrets.ASG_LAUNCH_CONFIG }}
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')
          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"
          TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
            --filters="Name=is-default-version,Values=false" \
            --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME --strategy Rolling
          printf "Instance refresh in progress"
          while true;
          do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              printf "\nInstance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              printf "\nInstance refresh failed!"
              exit 1
            fi
            echo -ne "."
            sleep 10
          done